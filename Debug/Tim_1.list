
Tim_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000470  08000478  00010478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000470  08000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000474  08000474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  08000478  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000020  08000478  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000a25  00000000  00000000  000104a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000206  00000000  00000000  00010ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000070  00000000  00000000  000110d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00011148  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000436  00000000  00000000  00011190  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000404  00000000  00000000  000115c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000119ca  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000ac  00000000  00000000  00011a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00011af4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000458 	.word	0x08000458

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000458 	.word	0x08000458

08000204 <main>:
};*/
/* Private function prototypes */
/* Private functions */

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	//Ligando clocks dos perifericos
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000208:	4a4d      	ldr	r2, [pc, #308]	; (8000340 <main+0x13c>)
 800020a:	4b4d      	ldr	r3, [pc, #308]	; (8000340 <main+0x13c>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
	//RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; <- Outros timers
	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8000214:	4a4a      	ldr	r2, [pc, #296]	; (8000340 <main+0x13c>)
 8000216:	4b4a      	ldr	r3, [pc, #296]	; (8000340 <main+0x13c>)
 8000218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800021a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800021e:	6453      	str	r3, [r2, #68]	; 0x44

	// Configurando pinos para saida
	GPIOB->MODER &= ~(GPIO_MODER_MODER0 | GPIO_MODER_MODER1 | GPIO_MODER_MODER2
 8000220:	4a48      	ldr	r2, [pc, #288]	; (8000344 <main+0x140>)
 8000222:	4b48      	ldr	r3, [pc, #288]	; (8000344 <main+0x140>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800022a:	f023 030f 	bic.w	r3, r3, #15
 800022e:	6013      	str	r3, [r2, #0]
						| GPIO_MODER_MODER3 | GPIO_MODER_MODER4 | GPIO_MODER_MODER5);
	GPIOB->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0
 8000230:	4a44      	ldr	r2, [pc, #272]	; (8000344 <main+0x140>)
 8000232:	4b44      	ldr	r3, [pc, #272]	; (8000344 <main+0x140>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800023a:	f043 0305 	orr.w	r3, r3, #5
 800023e:	6013      	str	r3, [r2, #0]
						| GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);

	// Configurando o timer para 10Hz
	TIM10->PSC = 999;
 8000240:	4b41      	ldr	r3, [pc, #260]	; (8000348 <main+0x144>)
 8000242:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000246:	629a      	str	r2, [r3, #40]	; 0x28
	TIM10->ARR = 1599;
 8000248:	4b3f      	ldr	r3, [pc, #252]	; (8000348 <main+0x144>)
 800024a:	f240 623f 	movw	r2, #1599	; 0x63f
 800024e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM10->CR1 = TIM_CR1_CEN;
 8000250:	4b3d      	ldr	r3, [pc, #244]	; (8000348 <main+0x144>)
 8000252:	2201      	movs	r2, #1
 8000254:	601a      	str	r2, [r3, #0]



	while (1)
	{
		if (TIM10->SR & TIM_SR_UIF) {
 8000256:	4b3c      	ldr	r3, [pc, #240]	; (8000348 <main+0x144>)
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f9      	beq.n	8000256 <main+0x52>
			TIM10->SR &= ~TIM_SR_UIF;
 8000262:	4a39      	ldr	r2, [pc, #228]	; (8000348 <main+0x144>)
 8000264:	4b38      	ldr	r3, [pc, #224]	; (8000348 <main+0x144>)
 8000266:	691b      	ldr	r3, [r3, #16]
 8000268:	f023 0301 	bic.w	r3, r3, #1
 800026c:	6113      	str	r3, [r2, #16]
			contador++;
 800026e:	4b37      	ldr	r3, [pc, #220]	; (800034c <main+0x148>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	3301      	adds	r3, #1
 8000274:	b2da      	uxtb	r2, r3
 8000276:	4b35      	ldr	r3, [pc, #212]	; (800034c <main+0x148>)
 8000278:	701a      	strb	r2, [r3, #0]

			if (contador == 5) {
 800027a:	4b34      	ldr	r3, [pc, #208]	; (800034c <main+0x148>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b05      	cmp	r3, #5
 8000280:	d113      	bne.n	80002aa <main+0xa6>
				if (GPIOB->ODR & VERDE1) {
 8000282:	4b30      	ldr	r3, [pc, #192]	; (8000344 <main+0x140>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f003 0304 	and.w	r3, r3, #4
 800028a:	2b00      	cmp	r3, #0
 800028c:	d006      	beq.n	800029c <main+0x98>
					GPIOB->ODR |= AMARELO1;
 800028e:	4a2d      	ldr	r2, [pc, #180]	; (8000344 <main+0x140>)
 8000290:	4b2c      	ldr	r3, [pc, #176]	; (8000344 <main+0x140>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	f043 0302 	orr.w	r3, r3, #2
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	e7dc      	b.n	8000256 <main+0x52>
				} else {
					GPIOB->ODR |= AMARELO2;
 800029c:	4a29      	ldr	r2, [pc, #164]	; (8000344 <main+0x140>)
 800029e:	4b29      	ldr	r3, [pc, #164]	; (8000344 <main+0x140>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	f043 0310 	orr.w	r3, r3, #16
 80002a6:	6153      	str	r3, [r2, #20]
 80002a8:	e7d5      	b.n	8000256 <main+0x52>
				}
			} else if (contador == 7) {
 80002aa:	4b28      	ldr	r3, [pc, #160]	; (800034c <main+0x148>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	d1d1      	bne.n	8000256 <main+0x52>
				if (GPIOB->ODR & VERDE1) {
 80002b2:	4b24      	ldr	r3, [pc, #144]	; (8000344 <main+0x140>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	f003 0304 	and.w	r3, r3, #4
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d01e      	beq.n	80002fc <main+0xf8>
					GPIOB->ODR |= VERMELHO1;
 80002be:	4a21      	ldr	r2, [pc, #132]	; (8000344 <main+0x140>)
 80002c0:	4b20      	ldr	r3, [pc, #128]	; (8000344 <main+0x140>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~VERDE1;
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <main+0x140>)
 80002cc:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <main+0x140>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	f023 0304 	bic.w	r3, r3, #4
 80002d4:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~AMARELO1;
 80002d6:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <main+0x140>)
 80002d8:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <main+0x140>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f023 0302 	bic.w	r3, r3, #2
 80002e0:	6153      	str	r3, [r2, #20]

					GPIOB->ODR |= VERDE2;
 80002e2:	4a18      	ldr	r2, [pc, #96]	; (8000344 <main+0x140>)
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <main+0x140>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f043 0320 	orr.w	r3, r3, #32
 80002ec:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~VERMELHO2;
 80002ee:	4a15      	ldr	r2, [pc, #84]	; (8000344 <main+0x140>)
 80002f0:	4b14      	ldr	r3, [pc, #80]	; (8000344 <main+0x140>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	f023 0308 	bic.w	r3, r3, #8
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	e01d      	b.n	8000338 <main+0x134>
				} else {
					GPIOB->ODR |= VERMELHO2;
 80002fc:	4a11      	ldr	r2, [pc, #68]	; (8000344 <main+0x140>)
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <main+0x140>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~VERDE2;
 8000308:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <main+0x140>)
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <main+0x140>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f023 0320 	bic.w	r3, r3, #32
 8000312:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~AMARELO2;
 8000314:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <main+0x140>)
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <main+0x140>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f023 0310 	bic.w	r3, r3, #16
 800031e:	6153      	str	r3, [r2, #20]

					GPIOB->ODR |= VERDE1;
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <main+0x140>)
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <main+0x140>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~VERMELHO1;
 800032c:	4a05      	ldr	r2, [pc, #20]	; (8000344 <main+0x140>)
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <main+0x140>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f023 0301 	bic.w	r3, r3, #1
 8000336:	6153      	str	r3, [r2, #20]
				}
				contador = 0;
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <main+0x148>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
		if (TIM10->SR & TIM_SR_UIF) {
 800033e:	e78a      	b.n	8000256 <main+0x52>
 8000340:	40023800 	.word	0x40023800
 8000344:	40020400 	.word	0x40020400
 8000348:	40014400 	.word	0x40014400
 800034c:	2000001c 	.word	0x2000001c

08000350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000388 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000354:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000356:	e003      	b.n	8000360 <LoopCopyDataInit>

08000358 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800035a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800035c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800035e:	3104      	adds	r1, #4

08000360 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000360:	480b      	ldr	r0, [pc, #44]	; (8000390 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000364:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000366:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000368:	d3f6      	bcc.n	8000358 <CopyDataInit>
  ldr  r2, =_sbss
 800036a:	4a0b      	ldr	r2, [pc, #44]	; (8000398 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800036c:	e002      	b.n	8000374 <LoopFillZerobss>

0800036e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800036e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000370:	f842 3b04 	str.w	r3, [r2], #4

08000374 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000376:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000378:	d3f9      	bcc.n	800036e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800037a:	f000 f813 	bl	80003a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800037e:	f000 f847 	bl	8000410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000382:	f7ff ff3f 	bl	8000204 <main>
  bx  lr    
 8000386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000388:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800038c:	08000478 	.word	0x08000478
  ldr  r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000394:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 800039c:	20000020 	.word	0x20000020

080003a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a8:	4a16      	ldr	r2, [pc, #88]	; (8000404 <SystemInit+0x60>)
 80003aa:	4b16      	ldr	r3, [pc, #88]	; (8000404 <SystemInit+0x60>)
 80003ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003b8:	4a13      	ldr	r2, [pc, #76]	; (8000408 <SystemInit+0x64>)
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SystemInit+0x64>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <SystemInit+0x64>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003ca:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <SystemInit+0x64>)
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <SystemInit+0x64>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SystemInit+0x64>)
 80003dc:	4a0b      	ldr	r2, [pc, #44]	; (800040c <SystemInit+0x68>)
 80003de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003e0:	4a09      	ldr	r2, [pc, #36]	; (8000408 <SystemInit+0x64>)
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <SystemInit+0x64>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SystemInit+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <SystemInit+0x60>)
 80003f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003f8:	609a      	str	r2, [r3, #8]
#endif
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	40023800 	.word	0x40023800
 800040c:	24003010 	.word	0x24003010

08000410 <__libc_init_array>:
 8000410:	b570      	push	{r4, r5, r6, lr}
 8000412:	4e0d      	ldr	r6, [pc, #52]	; (8000448 <__libc_init_array+0x38>)
 8000414:	4c0d      	ldr	r4, [pc, #52]	; (800044c <__libc_init_array+0x3c>)
 8000416:	1ba4      	subs	r4, r4, r6
 8000418:	10a4      	asrs	r4, r4, #2
 800041a:	2500      	movs	r5, #0
 800041c:	42a5      	cmp	r5, r4
 800041e:	d109      	bne.n	8000434 <__libc_init_array+0x24>
 8000420:	4e0b      	ldr	r6, [pc, #44]	; (8000450 <__libc_init_array+0x40>)
 8000422:	4c0c      	ldr	r4, [pc, #48]	; (8000454 <__libc_init_array+0x44>)
 8000424:	f000 f818 	bl	8000458 <_init>
 8000428:	1ba4      	subs	r4, r4, r6
 800042a:	10a4      	asrs	r4, r4, #2
 800042c:	2500      	movs	r5, #0
 800042e:	42a5      	cmp	r5, r4
 8000430:	d105      	bne.n	800043e <__libc_init_array+0x2e>
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000438:	4798      	blx	r3
 800043a:	3501      	adds	r5, #1
 800043c:	e7ee      	b.n	800041c <__libc_init_array+0xc>
 800043e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000442:	4798      	blx	r3
 8000444:	3501      	adds	r5, #1
 8000446:	e7f2      	b.n	800042e <__libc_init_array+0x1e>
 8000448:	08000470 	.word	0x08000470
 800044c:	08000470 	.word	0x08000470
 8000450:	08000470 	.word	0x08000470
 8000454:	08000474 	.word	0x08000474

08000458 <_init>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr

08000464 <_fini>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr
