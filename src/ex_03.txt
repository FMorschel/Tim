/*
O led de status de um equipamento é utilizado para sinalizar sua condição de
operação, através de uma mensagem visual codificada como piscadas. O
período da mensagem é de 1s e o tempo de cada piscada é de 100 ms,
seguido por 100ms com o led apagado.
As mensagens seguem a codificação dada pela tabela abaixo:

Código Número piscadas Significado
0 Sempre aceso Funcionamento ok
1 1 Falha de comunicação
2 2 Entradas digitais abertas
3 3 Termopar aberto
4 4 Curto na saída
5 5 Fusível aberto

O led é ativo em HIGH, conectado ao PA8.
Utilize os pinos PB3, PB4 e PB5 para entrada do código. Podem ser
utilizados botões, chaves ou mesmo jumpers.
*/

/* Includes */
#include "stm32f4xx.h"

/* Private macro */

/* Private variables */
uint8_t contador = 0;
uint8_t codigo = 0;
/* Private function prototypes */
/* Private functions */

int main(void)
{
	//Ligando clocks dos perifericos
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
	//RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; <- Outros timers
	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;

	// Configurando pinos para saida
	GPIOA->MODER &= ~GPIO_MODER_MODER8;
	GPIOA->MODER |= GPIO_MODER_MODER8_0;

	//Configurando entradas
	GPIOB->MODER &= ~(GPIO_MODER_MODER3 | GPIO_MODER_MODER4 | GPIO_MODER_MODER5) ;

	// Configurando o timer para 10Hz
	TIM10->PSC = 999;
	TIM10->ARR = 1599;
	TIM10->CR1 = TIM_CR1_CEN;

	while (1)
	{
		// Verificando se os botoes foram pressionados
		codigo = (GPIOB->IDR & (GPIO_IDR_IDR_3 | GPIO_IDR_IDR_4 | GPIO_IDR_IDR_5)) >> 3;

		if (codigo == 0) {
			GPIOA->ODR |= GPIO_ODR_ODR_8;
			contador = 0;
		}

		if (TIM10->SR & TIM_SR_UIF)
		{
			TIM10->SR &= ~TIM_SR_UIF;

			if (codigo != 0) {
				contador++;

				if (contador == 10) contador = 0;

				if  (contador % 2) { // Se o valor do contador for impar
					// Ex:
					// contador 1: 1 / 2  = 0 -> codigo 0 < 2
					// contador 3: 3 / 2  = 1 -> codigo 1 < 2
					// contador 5: 5 / 2  = 2 -> codigo 2 < 2
					// contador 7: 7 / 2  = 3 -> codigo 3 < 2
					// contador 9: 9 / 2  = 4 -> codigo 4 < 2
					if ((contador / 2) <= codigo) {
						GPIOA->ODR &= ~GPIO_ODR_ODR_8;
					}
				} else {
					GPIOA->ODR |= GPIO_ODR_ODR_8; 
				}
			} else {
				contador = 0;
			}
		}
	}
}
