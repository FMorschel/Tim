/*
fazer um programa que execute um codigo que faÃ§a uma contagem de 0 a 9 num display na frequencia de 7hz, caso aperte um botao, o display fara a contagem no dobro da frequencia
 */

// adicionar no codigo a logica do estado de 0 a 9
// adicionar a logica do estado de 9 a 0
// modificar o codigo para dois botoes: 1 botao aperta ele e o estado vai de 0 a 9 em x frequencia, aperta o botao 2 e o estado vai de 9 a 0 em y frequencia

// configurar gpio timer 10(segund0 1) 11(frequencia)
// fzazer com segmentos horizontal e vertical do display

#include "stm32f4xx.h"

#define LEDA GPIO_ODR_ODR_0
#define LEDB GPIO_ODR_ODR_1
#define LEDC GPIO_ODR_ODR_2
#define LEDD GPIO_ODR_ODR_3
#define LEDE GPIO_ODR_ODR_4
#define LEDF GPIO_ODR_ODR_5
#define LEDG GPIO_ODR_ODR_6

#define TAMANHO_VETOR 8
#define TOTAL (TAMANHO_VETOR + 1)

const uint8_t matricula[TAMANHO_VETOR] = {2, 1, 0, 0, 0, 2, 4, 7};

const uint32_t leds[10] = {
		LEDA | LEDB | LEDC | LEDD | LEDE | LEDF,		// 0000 | 0  | led = 0
		LEDB | LEDC,									// 0001 | 1  | led = 1
		LEDA | LEDB | LEDD | LEDE | LEDG,				// 0010 | 2  | led = 2
		LEDA | LEDB | LEDC | LEDD | LEDG,				// 0011 | 3  | led = 3
		LEDB | LEDC | LEDF | LEDG,						// 0100 | 4  | led = 4
		LEDA | LEDC | LEDD | LEDF | LEDG,				// 0101 | 5  | led = 5
		LEDA | LEDC | LEDD | LEDE | LEDF | LEDG,		// 0110 | 6  | led = 6
		LEDA | LEDB | LEDC,								// 0111 | 7  | led = 7
		LEDA | LEDB | LEDC | LEDD | LEDE | LEDF | LEDG, // 1000 | 8  | led = 8
		LEDA | LEDB | LEDC | LEDD | LEDF | LEDG,		// 1001 | 9  | led = 9
};

#define TODOS (LEDA | LEDB | LEDC | LEDD | LEDE | LEDF | LEDG)

#define LED_FINAL GPIO_ODR_ODR_0

uint8_t estado = 0;

int main()
{

	// clock pinos io c e b
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIOBEN;

	// clock timer
	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;

	// Configurando pinos saidas segmentos display
	GPIOB->MODER &= ~(GPIO_MODER_MODER0 | GPIO_MODER_MODER1 | GPIO_MODER_MODER2 | GPIO_MODER_MODER3 | GPIO_MODER_MODER4 | GPIO_MODER_MODER5 | GPIO_MODER_MODER6);
	GPIOB->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER6_0);

	// Configurando pinos saidas led
	GPIOC->MODER &= ~(GPIO_MODER_MODER0);
	GPIOC->MODER |= (GPIO_MODER_MODER0_0);

	// configurando timer 10 para 2Hz
	TIM10->PSC = 999;
	TIM10->ARR = 7999;
	TIM10->CR1 = TIM_CR1_CEN;









	GPIOC->ODR &= ~LED_FINAL;
	GPIOB->ODR &= ~TODOS;
	GPIOB->ODR |= leds[matricula[estado]];

	while (1)
	{

		if (TIM10->SR & TIM_SR_UIF)
		{
			TIM10->SR &= ~TIM_SR_UIF;

			estado++;
			if (estado >= TOTAL) estado = 0; 

			if (estado < TAMANHO_VETOR) {
				GPIOC->ODR &= ~LED_FINAL;
				GPIOB->ODR &= ~TODOS;
				GPIOB->ODR |= leds[matricula[estado]];
			} else {
				GPIOC->ODR |= LED_FINAL;
			}
		}
	}
}
