/*
fazer um programa que execute um codigo que faÃ§a uma contagem de 0 a 9 num display na frequencia de 7hz, caso aperte um botao, o display fara a contagem no dobro da frequencia
 */

// adicionar no codigo a logica do contador de 0 a 9
// adicionar a logica do contador de 9 a 0
// modificar o codigo para dois botoes: 1 botao aperta ele e o contador vai de 0 a 9 em x frequencia, aperta o botao 2 e o contador vai de 9 a 0 em y frequencia

#define ledA GPIO_ODR_ODR_0
#define ledB GPIO_ODR_ODR_1
#define ledC GPIO_ODR_ODR_2
#define ledD GPIO_ODR_ODR_3
#define ledE GPIO_ODR_ODR_4
#define ledF GPIO_ODR_ODR_5
#define ledG GPIO_ODR_ODR_6

#define botao GPIO_IDR_IDR_0

#define F28HZ 570
#define F14HZ 1142

uint8_t contador = 9;

#include "stm32f4xx.h"

const uint32_t leds[10] =
	{
		ledA | ledB | ledC | ledD | ledE | ledF,		// 0000 | 0  | led = 0
		ledB | ledC,									// 0001 | 1  | led = 1
		ledA | ledB | ledD | ledE | ledG,				// 0010 | 2  | led = 2
		ledA | ledB | ledC | ledD | ledG,				// 0011 | 3  | led = 3
		ledB | ledC | ledF | ledG,						// 0100 | 4  | led = 4
		ledA | ledC | ledD | ledF | ledG,				// 0101 | 5  | led = 5
		ledA | ledC | ledD | ledE | ledF | ledG,		// 0110 | 6  | led = 6
		ledA | ledB | ledC,								// 0111 | 7  | led = 7
		ledA | ledB | ledC | ledD | ledE | ledF | ledG, // 1000 | 8  | led = 8
		ledA | ledB | ledC | ledD | ledF | ledG,		// 1001 | 9  | led = 9
};

int main()
{
	// clock pinos io c e b
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIOBEN;

	// clock timer
	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;

	// Configurando pino de entrada (botao)
	GPIOC->MODER &= ~GPIO_MODER_MODER0;

	// Configurando pinos saidas segmentos display
	GPIOB->MODER &= ~(GPIO_MODER_MODER0 | GPIO_MODER_MODER1 | GPIO_MODER_MODER2 | GPIO_MODER_MODER3 | GPIO_MODER_MODER4 | GPIO_MODER_MODER5 | GPIO_MODER_MODER6);
	GPIOB->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER6_0);

	// configurando timer para 28hz
	TIM10->PSC = 999;
	TIM10->ARR = F28HZ;
	TIM10->CR1 = TIM_CR1_CEN;

	while (1)
	{
		if ((GPIOC->IDR & botao) == 1)
		{
			TIM10->ARR = F14HZ;
		}
		else
		{
			TIM10->ARR = F28HZ;
		}

		if (TIM10->CNT >= TIM10->ARR)
		{
				TIM10->CNT = 0;
		}

		if (TIM10->SR & TIM_SR_UIF)
		{
			TIM10->SR &= ~TIM_SR_UIF;
			contador--;

			if (contador < 0)
			{
				contador = 9;
			}
			GPIOB->ODR = leds[contador];
		}
	}
}
